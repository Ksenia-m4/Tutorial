// const Car = function (value) {
//   // 2 —Ñ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—å–µ–∫—Ç–∞, —Ç.–µ this –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ
//   // console.log(this);

//   this.a = value;
//   // 4 —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—å–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ new Car
//   // 3 –≤ —Å–≤–æ–π—Å—Ç–≤–µ this.__proto__ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—å–µ–∫—Ç Car.prototype, —Ç.–µ Car.prototype - –ø—Ä–æ—Ç–æ—Ç–∏–ø –±—É–¥—É—â–µ–≥–æ –æ–±—å–µ–∫—Ç–∞
// };

// // console.log(Car.prototype);
// Car.prototype.sayHi = function () {
//   // console.log(`sayHi`, this);
// };
// // 1 –µ—Å–ª–∏ —Ñ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ new  —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
// const myCar = new Car(5); // –ø.2 this –æ–±—ä–µ–∫—Ç–∞ —ç—Ç–æ this fn –≤—ã—à–µ (Car)
// // new Car(5) - —ç—Ç–æ –í–´–ó–û–í —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º new
// // myCar.sayHi();

// Car.logInfo = function (object) {
//   // console.log(object);
// }; // —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö

// console.dir(Car);

// Example 1 - –ë–ª–æ–≥–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
// email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// age - –≤—ñ–∫, —á–∏—Å–ª–æ
// numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å–∏–≤ —Ç–µ–º, –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
// –ö–ª–∞—Å –æ—á—ñ–∫—É—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äì –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${—É –ø–æ—Å—Ç—ñ–≤} posts.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

class Blogger {
  constructor({ name, age, numberOfPosts, topics = [] } = {}) {
    this.email = name;
    this.age = age;
    this.numberOfPosts = numberOfPosts;
    this.topics = topics;
  }

  getInfo() {
    return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts`;
  }

  updatePostCount(value) {
    this.numberOfPosts += value;
  }
}

const mango1 = new Blogger({
  name: "mango@mail.com",
  age: 24,
  numberOfPosts: 20,
  topics: ["tech", "cooking"],
});

// console.log(mango);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

// const poly = new Blogger({
//   name: "poly@mail.com",
//   age: 19,
//   numberOfPosts: 17,
//   topics: ["sports", "gaming", "health"],
// });
// console.log(poly);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts

// Example 2 - –°—Ö–æ–≤–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤, —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:

// getItems() ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.

// class Storage {
//   constructor(items) {
//     this.items = items;
//   }
//   getItems() {
//     return this.items;
//   }
//   addItem(item) {
//     if (!this.items.includes(item)) {
//       items.push(item);
//       return;
//     }
//     return "–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å";
//   }
//   removeItem(item) {
//     const idx = this.items.indexOf(item);
//     console.log(idx);
//     if (!!~idx) {
//       this.items.splice(idx, 1);
//     }
//   }
// }
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT
// -(-1+1) = -0 // false
// -(0+1) = -1 // true
// !! => —ç—Ç–æ –º—ã –ø—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –±—É–ª—é === Boolean()

// const storage = new Storage(["üçé", "üçã", "üçá", "üçë"]);
// console.log(storage);
// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem("üçå");
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.addItem("üçé");
// console.table(storage.items);
// console.log(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]
// storage.removeItem("üçé");
// console.log(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä —Ç–∞ —Å–µ—Ç—Ç–µ—Ä login —Ç–∞ email.

class User1 {
  #login;
  #email;

  constructor({ login, email } = {}) {
    this.#login = login;
    this.#email = email;
  }

  get login() {
    return this.#login;
  }

  set login(newLogin) {
    this.#login = newLogin;
  }

  get email() {
    return this.#email;
  }
  set email(newEmail) {
    this.#email = newEmail;
  }
}

// const mango = new User1({
//   login: "Mango",
//   email: "mango@dog.woof",
// });
// console.log(mango);

// mango.login = "asvasdadasd";
// console.log(mango);

// console.log(mango.login); // Mango
// mango.login = "Mangodoge";
// console.log(mango);
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: "Poly",
//   email: "poly@mail.com",
// });

// console.log(poly.login); // Poly
// poly.login = "Polycutie";
// console.log(poly.login); // Polycutie

// Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes, —è–∫–∏–π —É–ø—Ä–∞–≤–ª—è—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items. –ù–æ—Ç–∞—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫—ñ–π –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updatePriority(text, newPriority).

class Notes {
  static Priority = {
    LOW: "low",
    NORMAL: "normal",
    HIGH: "high",
  };
  constructor(note) {
    this.items = note;
  }
  addNote(note) {
    // if (!this.items.includes(note)) { // –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–ª–æ–∂–Ω—ã–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö, –∞ —É –Ω–∞—Å –º–∞—Å—Å–∏–≤ –æ–±—å–µ–∫—Ç–æ–≤
    //   this.items.push(note);
    // }
    const inArr = this.items.some(({ text }) => text === note.text);
    if (!inArr) {
      this.items.push(note);
    }
  }

  removeNote(text) {
    const idx = this.items.findIndex(({ text: noteText }) => noteText === text);
    if (!!~idx) {
      this.items.splice(idx, 1);
    }
  }

  updateNote(text, newPriority) {
    const idx = this.items.findIndex(({ text: noteText }) => noteText === text);
    console.log(idx);
    if (!!~idx) {
      this.items[idx].priority = newPriority;
    }
  }
}

// const myNotes = new Notes([]);

// myNotes.addNote({
//   text: "–ú–æ—è –ø–µ—Ä—à–∞ –Ω–æ—Ç–∞—Ç–∫–∞",
//   priority: Notes.Priority.LOW,
// });
// myNotes.addNote({
//   text: "–ú–æ—è –¥—Ä—É–≥–∞ –Ω–æ—Ç–∞—Ç–∫–∞",
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.addNote({
//   text: "–ú–æ—è –¥—Ä—É–≥–∞ –Ω–æ—Ç–∞—Ç–∫–∞",
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.removeNote("–ú–æ—è –¥—Ä—É–≥–∞ –Ω–æ—Ç–∞—Ç–∫–∞");
// console.log(myNotes.items);

// myNotes.updateNote("–ú–æ—è –¥—Ä—É–≥–∞ –Ω–æ—Ç–∞—Ç–∫–∞", Notes.Priority.HIGH);
// console.log(myNotes.items);

// Example 5 - Toggle
// –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å Toggle, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å {isOpen: boolean} —ñ –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å on - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–æ–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ on –º–∞—î –±—É—Ç–∏ false.

// const firstToggle = new Toggle({ isOpen: true });
// console.group('firstToggle');
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd('firstToggle');

// const secondToggle = new Toggle();
// console.group('secondToggle');
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd('secondToggle');

const pizzaPalace = {
  pizzas: ["Supercheese", "Smoked", "Four meats"],
  // Change code below this line
  checkPizza(pizzaName) {
    return this.pizzas.includes(pizzaName);
  },
  order(pizzaName) {
    const isPizzaAvailable = this.checkPizza(pizzaName);

    if (!isPizzaAvailable) {
      return `Sorry, there is no pizza named ¬´${pizzaName}¬ª`;
    }

    return `Order accepted, preparing ¬´${pizzaName}¬ª pizza`;
  },
  // Change code above this line
};

// console.log(pizzaPalace.order("Smoked"));
// console.log(pizzaPalace.order("Four meats"));
// console.log(pizzaPalace.order("Big Mike"));
// console.log(pizzaPalace.order("Viennese"));

// –ó–∞–¥–∞—á–∞ 2/20
// –ü–µ—Ä–µ–¥ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–æ–º–∞–ª –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã. –í—ã–ø–æ–ª–Ω–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–∞ customer, —Ä–∞—Å—Å—Ç–∞–≤–∏–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ this –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –æ–±—ä–µ–∫—Ç–∞.

// –ü–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –≤ —Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–≤–æ–π –∫–æ–¥ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∏—á–µ–≥–æ —Ç–∞–º –Ω–µ –º–µ–Ω—è–π.

// –û–±—ä—è–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è customer
// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π customer —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –º–µ—Ç–æ–¥–∞–º–∏
// –í—ã–∑–æ–≤ customer.getDiscount() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ discount
// –í—ã–∑–æ–≤ customer.setDiscount(0.15) –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ discount
// –í—ã–∑–æ–≤ customer.get Balance() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ balance.
// –í—ã–∑–æ–≤ customer.getOrders() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ orders
// –í—ã–∑–æ–≤ customer.addOrder(5000, "Steak") –¥–æ–±–∞–≤–ª—è–µ—Ç "Steak" –≤ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π —Å–≤–æ–π—Å—Ç–≤–∞ orders –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å
// –ú–µ—Ç–æ–¥ getBalance –æ–±—ä–µ–∫—Ç–∞ customer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç this
// –ú–µ—Ç–æ–¥ getDiscount –æ–±—ä–µ–∫—Ç–∞ customer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç this
// –ú–µ—Ç–æ–¥ setDiscount –æ–±—ä–µ–∫—Ç–∞ customer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç this
// –ú–µ—Ç–æ–¥ getOrders –æ–±—ä–µ–∫—Ç–∞ customer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç this
// –ú–µ—Ç–æ–¥ addOrder –æ–±—ä–µ–∫—Ç–∞ customer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç this

const customer = {
  username: "Mango",
  balance: 24000,
  discount: 0.1,
  orders: ["Burger", "Pizza", "Salad"],
  // Change code below this line
  getBalance() {
    return this.balance;
  },
  getDiscount() {
    return this.discount;
  },
  setDiscount(value) {
    this.discount = value;
  },
  getOrders() {
    return this.orders;
  },
  addOrder(cost, order) {
    this.balance -= cost - cost * this.discount;
    this.orders.push(order);
  },
  // Change code above this line
};

// customer.setDiscount(0.15);
// console.log(customer.getDiscount()); // 0.15
// customer.addOrder(5000, "Steak");
// console.log(customer.getBalance()); // 19750
// console.log(customer.getOrders()); // ["Burger", "Pizza", "Salad", "Steak"]

const historyService = {
  orders: [
    { email: "jacob@hotmail.com", dish: "Burrito" },
    { email: "solomon@topmail.net", dish: "Burger" },
    { email: "artemis@coldmail.net", dish: "Pizza" },
    { email: "solomon@topmail.net", dish: "Apple pie" },
    { email: "jacob@hotmail.com", dish: "Taco" },
  ],
  // Change code below this line
  getOrdersLog() {
    return this.orders
      .map((order) => `email: ${order.email} dish: ${order.dish}`)
      .join(" - ");
  },
  getEmails() {
    const emails = this.orders.map((order) => order.email);
    const uniqueEmails = new Set(emails);
    return [...uniqueEmails];
  },
  getOrdersByEmail(email) {
    return this.orders.filter((order) => order.email === email);
  },
  // Change code above this line
};

// console.log(historyService.getOrdersByEmail("artemis@coldmail.net"));
// –í—ã–∑–æ–≤ historyService.getOrdersLog() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ orders
// –í—ã–∑–æ–≤ historyService.getEmails() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ orders
// –í—ã–∑–æ–≤ historyService.getOrdersByEmail("solomon@topmail.net") –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [{ email: "solomon@topmail.net", dish: "Burger" }, { email: "solomon@topmail.net", dish: "Apple pie" }]
// –í—ã–∑–æ–≤ historyService.getOrdersByEmail("artemis@coldmail.net") –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [{ email: "artemis@coldmail.net", dish: "Pizza" }]

// –ó–∞–¥–∞—á–∞ 10/20
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å Storage, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –ö–ª–∞—Å—Å –æ–∂–∏–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–æ items.

// –û–±—ä—è–≤–∏ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:

// getItems() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.
// addItem(newItem) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä newItem –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.
// removeItem(itemToRemove) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–≤–∞—Ä itemToRemove –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–≤–æ–π—Å—Ç–≤–µ items –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.
// –ü–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –≤ —Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–≤–æ–π –∫–æ–¥ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∏—á–µ–≥–æ —Ç–∞–º –Ω–µ –º–µ–Ω—è–π.

class Storage {
  constructor(items) {
    this.items = items;
  }
  getItems() {
    return this.items;
  }
  addItem(newItem) {
    if (!this.items.includes(newItem)) {
      this.items.push(newItem);
      return;
    }
    return;
  }
  removeItem(itemToRemove) {
    const idx = this.items.indexOf(itemToRemove);
    if (!!~idx) {
      this.items.splice(idx, 1);
      return;
    }
    return;
  }
}

// Change code above this line
// const storage = new Storage(["Nanitoids", "Prolonger", "Antigravitator"]);
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator"]
// storage.addItem("Droid");
// console.log(storage.getItems()); // ["Nanitoids", "Prolonger", "Antigravitator", "Droid"]
// storage.removeItem("Prolonger");
// console.log(storage.getItems()); // ["Nanitoids", "Antigravitator", "Droid"]

// class Storage {
//   constructor(items) {
//     this.items = items;
//   }
//   getItems() {
//     return this.items;
//   }
//   addItem(item) {
//     if (!this.items.includes(item)) {
//       items.push(item);
//       return;
//     }
//     return "–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å";
//   }
//   removeItem(item) {
//     const idx = this.items.indexOf(item);
//     console.log(idx);
//     if (!!~idx) {
//       this.items.splice(idx, 1);
//     }
//   }
// }

// –ó–∞–¥–∞—á–∞ 11/20
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å StringBuilder, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä initialValue - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–æ value.

// –û–±—ä—è–≤–∏ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞:

// getValue() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ value.
// padEnd(str) - –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä str (—Å—Ç—Ä–æ–∫—É) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –∫–æ–Ω–µ—Ü –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ value –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.
// padStart(str) - –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä str (—Å—Ç—Ä–æ–∫—É) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –Ω–∞—á–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ value –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.
// padBoth(str) - –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä str (—Å—Ç—Ä–æ–∫—É) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –Ω–∞—á–∞–ª–æ –∏ –≤ –∫–æ–Ω–µ—Ü –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ value –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.
// –ü–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –≤ —Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–≤–æ–π –∫–æ–¥ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∏—á–µ–≥–æ —Ç–∞–º –Ω–µ –º–µ–Ω—è–π.

class StringBuilder {
  constructor(initialValue) {
    this.value = initialValue;
  }
  getValue() {
    return this.value;
  }
  padEnd(str) {
    return (this.value += str);
  }
  padStart(str) {
    this.value = str + this.value;
  }
  padBoth(str) {
    this.padStart(str);
    this.padEnd(str);
  }
}

// Change code above this line
// const builder = new StringBuilder(".");
// console.log(builder.getValue()); // "."
// builder.padStart("^");
// console.log(builder.getValue()); // "^."
// builder.padEnd("^");
// console.log(builder.getValue()); // "^.^"
// builder.padBoth("=");
// console.log(builder.getValue()); // "=^.^="

// class Car {
//   // Change code below this line
//   #price;
//   static MAX_PRICE = 50000;

//   constructor({ price }) {
//     this.#price = price;
//   }

//   get price() {
//     return this.#price;
//   }

//   set price(newPrice) {
//     if (newPrice < Car.MAX_PRICE) {
//       this.#price = newPrice;
//     }
//     return;
//   }
//   // Change code above this line
// }

// const audi = new Car({ price: 35000 });
// console.log(audi.price); // 35000

// audi.price = 49000;
// console.log(audi.price); // 49000

// audi.price = 51000;
// console.log(audi.price); // 49000

class Car {
  static #MAX_PRICE = 50000;
  // Change code below this line
  static checkPrice(price) {
    if (price > Car.#MAX_PRICE) {
      return "Error! Price exceeds the maximum";
    }
    return "Success! Price is within acceptable limits";
  }
  // Change code above this line
  constructor({ price }) {
    this.price = price;
  }
}

// const audi = new Car({ price: 36000 });
// const bmw = new Car({ price: 64000 });

// console.log(Car.checkPrice(audi.price)); // "Success! Price is within acceptable limits"
// console.log(Car.checkPrice(bmw.price)); // "Error! Price exceeds the maximum"

// –ó–∞–¥–∞—á–∞ 19/20
// –î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É Admin –º–µ—Ç–æ–¥ constructor, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –¥–≤—É–º—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ email –∏ accessLevel. –î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É Admin –ø—É–±–ª–∏—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ accessLevel, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.

// –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞—Å—Å Admin –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–¥ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞.
// class User {
//   email;

//   constructor(email) {
//     this.email = email;
//   }

//   get email() {
//     return this.email;
//   }

//   set email(newEmail) {
//     this.email = newEmail;
//   }
// }

// class Admin extends User {
//   // Change code below this line

//   static AccessLevel = {
//     BASIC: "basic",
//     SUPERUSER: "superuser",
//   };
//   constructor({ email, accessLevel }) {
//     super(email);
//     this.accessLevel = accessLevel;
//   }

//   // Change code above this line
// }

// const mango = new Admin({
//   email: "mango@mail.com",
//   accessLevel: Admin.AccessLevel.SUPERUSER,
// });

// console.log(mango.email); // "mango@mail.com"
// console.log(mango.accessLevel); // "superuser"

// –ó–∞–¥–∞—á–∞ 20/20
//–î–æ–±–∞–≤—å –∫–ª–∞—Å—Å—É Admin —Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã.
// –ü—É–±–ª–∏—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ blacklistedEmails –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.

// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ blacklist(email) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ email –≤ –º–∞—Å—Å–∏–≤ —Ö—Ä–∞–Ω—è—â–∏–π—Å—è –≤ —Å–≤–æ–π—Å—Ç–≤–µ blacklistedEmails.

// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ isBlacklisted(email) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ email –≤ –º–∞—Å—Å–∏–≤–µ —Ö—Ä–∞–Ω—è—â–µ–º—Å—è –≤ —Å–≤–æ–π—Å—Ç–≤–µ blacklistedEmails –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true –∏–ª–∏ false.

// –ü–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ –≤ —Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–≤–æ–π –∫–æ–¥ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∏—á–µ–≥–æ —Ç–∞–º –Ω–µ –º–µ–Ω—è–π.
//
//
class User {
  email;

  constructor(email) {
    this.email = email;
  }

  get email() {
    return this.email;
  }

  set email(newEmail) {
    this.email = newEmail;
  }
}
class Admin extends User {
  // Change code below this line
  blacklistedEmails = [];

  static AccessLevel = {
    BASIC: "basic",
    SUPERUSER: "superuser",
  };

  constructor({ email, accessLevel }) {
    super(email);
    this.accessLevel = accessLevel;
  }

  blacklist(email) {
    this.blacklistedEmails.push(email);
  }

  isBlacklisted(email) {
    return this.blacklistedEmails.includes(email);
  }

  // Change code above this line
}

const mango = new Admin({
  email: "mango@mail.com",
  accessLevel: Admin.AccessLevel.SUPERUSER,
});

console.log(mango.email); // "mango@mail.com"
console.log(mango.accessLevel); // "superuser"

mango.blacklist("poly@mail.com");
console.log(mango.blacklistedEmails); // ["poly@mail.com"]
console.log(mango.isBlacklisted("mango@mail.com")); // false
console.log(mango.isBlacklisted("poly@mail.com")); // true

// class ContentEditor extends User {
//   constructor({ email, posts }) {
//     super(email);
//     this.posts = posts;
//   }

//   addPost(post) {
//     this.posts.push(post);
//   }
// }

// const editor = new ContentEditor({ email: "mango@mail.com", posts: [] });
// console.log(editor); // { email: 'mango@mail.com', posts: [] }
// console.log(editor.email); // 'mango@mail.com'
// editor.addPost("post-1");
// console.log(editor.posts); // ['post-1']
